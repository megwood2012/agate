{
  "hash": "f75adec72f595086e3c6facdbc297775",
  "result": {
    "markdown": "---\ntitle: \"Survey planning\"\nsubtitle: 'Suggested workflows for the survey planning tools'\n---\n\n\n\n\nThis page is meant to provide some examples of how the survey planning piloting functions maybe be used ahead of a planned mission. The below sections include examples for creating a targets file, creating a planned survey map, plotting a bathymetry profile for the planned track, and summarizing total mission distance and duration. \n\nAll code on this page combined in the [`workflow_surveyTrackPlanning.m`](https://github.com/sfregosi/agate-public/tree/main/agate/example_workflows/workflow_surveyTrackPlanning.m) in the 'example_workflows' folder within the 'agate-public/agate' folder. \n\nDetails for each function used below (inputs, outputs, etc) are available within the standard MATLAB-type documentation in the header of each function and include a detailed description, info on input and output arguments, and examples. These details can be pulled up by typing `doc function` or `help function` within the MATLAB Command Window.\n\n### Initialization\n\nTo run any of the `agate` functions, the toolbox must be initialized with a configuration file. \n\nNo configuration file yet? Go back to [Get started - Create configuration files](get-started.html#create-configuration-files). At a minimum, for `agate` to initialize, the configuration file must include the top *required* portion.\n\nThe examples on this page include some plotting, so the ` OPTIONAL - plotting ` section should be complete. \n\n```default\n% !ensure agate is on the path!\n\n% initialize with specified configuration file, 'agate_config.cnf'\nagate agate_config.cnf\n\n% OR\n\n% initialize with prompt to select configuration file\nagate\n\n% call CONFIG so it can be used later\nglobal CONFIG\n```\n\n<sub>[Back to top](#)</sub>\n\n### Create targets file from .kml\n\nThe `makeTargetsFile` function will read in an existing .kml (that contains a single path) and use it to create a properly formatted Seaglider 'targets' file. The generated targets file will be named 'targets_' plus the name of the .kml file (e.g., 'targets_exampleTrack'). It will contain header information with the glider and mission information defined in `CONFIG`, the date it was created, and the specified radius. \n\n```default\n/ Targets file for mission sgXXX_Location_Mon20XX\n/ Created on YYYY-mm-dd HH:MM UTC\n/ Deployment will take place at WP01, recovery at RECV\n/ template WPxx lat=DDMM.MMMM lon=DDDMM.MMMM radius=XXXX goto=WPzz\n```\n\nThe .kml can be made in Google Earth [MORE INFO ON THAT TO COME LATER!]\nTrack must be saved as a kml containing just a single track/path. To properly  save: within Google Earth, right click on track name in left panel, select save place as, change file type from .kmz to .kml, save.\nAn example is located in ['agate/example_workflows/exampleTrack.kml'](https://github.com/sfregosi/agate-public/tree/main/agate/example_workflows/exampleTrack.kml)\n\nWaypoint names can be generated one of three ways:\n(1) prefix: specify a character string prefix in the function call and alphanumeric names will be created automatically. \n(2) file: list the desired waypoint names within a simple .txt files, with one name per line and the number of waypoint names must equal the number of waypoints in the .kml; the function will prompt to select the file. An example can be found in ['agate/example_workflows/waypointNames.txt'](https://github.com/sfregosi/agate-public/tree/main/agate/example_workflows/waypointNames.txt)\n(3) manual: waypoint names are manually entered in the command window within the function call\n\n\n```default\n\n% specify file name to .kml path\nkmlFile = fullfile(CONFIG.path.mission, 'exampleTrack.kml');\n% OR\n% leave empty and will prompt to select .kml path\nkmlFile = []; \n\n% specify radius\nradius = 2000;\n\n% create targets file, 3 options to name waypoints\n% (1) prefix-based automated naming\nprefix = 'WP'; % Any two letters make easy to reference and read options\ntargetsOut = makeTargetsFile(CONFIG, kmlFile, prefix, radius);\n% OR\n% (2) use a text file with list of waypoint names; will prompt to select .txt\ntargetsOut = makeTargetsFile(CONFIG, kmlFile, 'file', radius);\n% OR\n% (3) manually enter in command window when prompted\ntargetsOut = makeTargetsFile(CONFIG, kmlFile, 'manual', radius);\n\n```\n\n<sub>[Back to top](#)</sub>\n\n### Plot planned track\n\nThe `mapPlannedTrack` function will create a simple map of the planned track with labeled waypoints. This function requires map extent to be defined in the configuration file. Bathymetry is optional and is toggled on or off with the `bathyOn` argument.  \n\n```default\n% set up map configuration\nbathyOn = 1;\nfigNum = 26;\n\n% use targetsOut file from above as input targets file\ntargetsFile = targetsOut;\n\n% create plot\nmapPlannedTrack(CONFIG, targetsFile, CONFIG.glider, bathyOn, figNum)\n\n\n% get file name only for plot saving\n[~, targetsName, ~] = fileparts(targetsFile);\n\n% save as .png\nexportgraphics(gcf, fullfile(CONFIG.path.mission, [CONFIG.glider '_' ...\n\tCONFIG.mission, '_plannedTrack_' targetsName, '.png']), ...\n    'Resolution', 300)\n% as .fig\nsavefig(fullfile(CONFIG.path.mission, [CONFIG.glider '_' CONFIG.mission, ...\n    '_plannedTrack_' targetsName, '.fig']))\n\n% save as .pdf or .eps - requires the export_fig toolbox available at\n%  https://github.com/altmany/export_fig\nexport_fig(fullfile(CONFIG.path.mission, [CONFIG.glider '_' CONFIG.mission, ...\n    '_plannedTrack_' targetsName, '.eps']), '-eps', '-painters');\nexport_fig(fullfile(CONFIG.path.mission, [CONFIG.glider '_' CONFIG.mission, ...\n    '_plannedTrack_' targetsName, '.pdf']), '-pdf', '-painters');\n\n```\n\n![](images/examplePlots/sg639_MHI_Apr2023_plannedTrack.png){#planned-map fig-align='center' width=60%}\n\n<sub>[Back to top](#)</sub>\n\n### Plot bathymetry profile\n\nIt can be useful to have a profile of the bathymetry the planned track will traverse, to highlight periods where the glider's target dive depth may need to be adjusted more shallow, or can be extended deeper. \n\nAn indicator line (dashed red line) will be plotted at 990 m as the default (max $D_TGT for Seagliders) but can be specified to a different value with the `yLine` argument. \n\n```default\n\n% can specify bathymetry file\nbathyFile = 'C:\\GIS\\etopo\\ETOPO2022_bedrock_30arcsec_MHI.tiff';\nplotTrackBathyProfile(CONFIG, targetsFile, bathyFile)\n% OR \n% leave empty to prompt to select file\nplotTrackBathyProfile(CONFIG, targetsFile)\n\n% save as .png\nexportgraphics(gcf, fullfile(CONFIG.path.mission, [CONFIG.glider '_' ...\n\tCONFIG.mission, '_targetsBathymetryProfile_' targetsName, '.png']), ...\n    'Resolution', 300)\n```\n\n![](images/examplePlots/sg639_MHI_Apr2023_targetsBathymetryProfile_targets.png){#track-bathy fig-align='center' width=80%}\n\n### Summarize planned track \n\nThe below code reads in an existing (or newly created!) targets file and will loop through to calculate the distance between each waypoint and then print out the total planned track distance. If an estimate of glider speed (in km/day) is available, that can be used to estimate mission duration. \n\n\n```default\n% if no targetsFile specified, will prompt to select\n[targets, targetsFile] = readTargetsFile(CONFIG);\n% OR specify targetsFile variable from above\n[targets, targetsFile] = readTargetsFile(CONFIG, targetsFile);\n\n% loop through all targets (expect RECV), calc distance between waypoints\nfor f = 1:height(targets) - 1\n    [targets.distToNext_km(f), ~] = lldistkm([targets.lat(f+1) targets.lon(f+1)], ...\n        [targets.lat(f) targets.lon(f)]);\nend\n\n% specify expected avg glider speed in km/day\navgSpd = 15; % km/day\n\n% print out summary\n[targetsPath, targetsName, ~] = fileparts(targetsFile);\nfprintf(1, 'Total tracklength for %s: %.0f km\\n', targetsName, ...\n\tsum(targets.distToNext_km));\nfprintf(1, 'Estimated mission duration, at %i km/day: %.1f days\\n', avgSpd, ...\n\tsum(targets.distToNext_km)/avgSpd);\n```\n\nThe output will look something like this: \n\n```\n>>\nTotal tracklength for targets_exampleTrack: 54 km\nEstimated mission duration, at 15 km/day: 3.6 days\n>>\n\n```\n\n<sub>[Back to top](#)</sub>\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}