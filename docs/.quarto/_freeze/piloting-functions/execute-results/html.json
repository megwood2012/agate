{
  "hash": "5550b0f5bd238f130df7ee4fa7f4c9fe",
  "result": {
    "markdown": "---\ntitle: \"Piloting\"\nsubtitle: 'Suggested workflows for using the piloting functions'\n---\n\n\n\n\nThis page is meant to demonstrate some suggested workflows and examples of how the piloting functions may be used in an active survey to help the pilot download basestation files, create monitoring plots, and monitor mission progress.\n\nAll code on this page combined in the [`workflow_downloadScript.m`](https://github.com/sfregosi/agate-public/tree/main/agate/example_workflows/workflow_downloadScript.m) in the 'example_workflows' folder within the 'agate-public/agate' folder. \n\nDetails for each piloting function (inputs, outputs, etc) are available within the standard MATLAB-type documentation in the header of each function and include a detailed description, info on input and output arguments, and examples. These details can be pulled up by typing `doc function` or `help function` within the MATLAB Command Window.\n\n### Initialization\n\nTo run any of the `agate` piloting functions, the toolbox must be initialized with a configuration file. \n\nNo configuration file yet? Go back to [Get started - Create configuration files](get-started.html#create-configuration-files). At a minimum, for `agate` to initialize, the configuration file must include the top *required* portion. If `agate` will be used to download files from the basestation to the local computer, a `basestation.cnf` file is required and the ` OPTIONAL - working with the basestation ` section must be completed. \n\nThe examples on this page include some plotting, so the ` OPTIONAL - plotting ` section should be complete. Examples below will also include some outputs for both the **PMAR** (`pm`) and **WISPR** (`ws`) acoustic systems. Those are specified in the configuration file and the examples below will indicate which system is 'active' for each example. This is controlled with the `CONFIG.pm.loggers` and `CONFIG.ws.loggers` options in the ` OPTIONAL - acoustics ` section of the configuration file. \n\n```default\n% !ensure agate is on the path!\n\n% initialize with specified configuration file, 'agate_config.cnf'\nagate agate_config.cnf\n\n% OR\n\n% initialize with prompt to select configuration file\nagate\n```\n\n<sub>[Back to top](#)</sub>\n\n### Downloading files from the basestation\n\n`agate` can use SSH to automatically download any new files present on the basestation to a local computer for further processing. The below folder structure is the suggested approach for working with `agate` and will ensure later functions are looking in the right spots. It may be possible to customize the folder structure but may result in bugs; if that happens, please report them and we can try to fix it! \n\n```default\n% specify the local piloting folder for this trip in CONFIG.path.mission\n% set up nested folders for basestation files and piloting outputs\npath_status = fullfile(CONFIG.path.mission, 'flightStatus'); % where to store output plots/tables\npath_bsLocal = fullfile(CONFIG.path.mission, 'basestationFiles'); % local copy of basestation files\n% make the dirs if they don't exist\nmkdir(path_status);\nmkdir(path_bsLocal);\n\n% download basestation files\ndownloadBasetationFiles(CONFIG, path_bsLocal)\n```\n\n<sub>[Back to top](#)</sub>\n\n### Creating a piloting parameters (`pp`) variable\n\nMany of the plotting and other piloting-related functions within `agate` rely on a `pp` (piloting parameters) variable - a large table with various outputs from the .nc and .log files compiled in one place. Use the `extractPilotingParams` to create this table. \n\nThe last argument, `preload`, is used to specify if the table should be made from scratch (does not load any previously created table), or if a previous table should be loaded and any new dives appended to that table. As more dives occur during a mission, creating a new table each time can get slow, so saving the previous table and setting `preload` to `1` can save processing time. If the piloting parameters table is saved in the default location shown in the `save()` step below, then it will be loaded automatically. If it is saved elsewhere, the function will prompt to select the correct .mat to load. \n\n```default\n% create piloting parameters (pp) table from downloaded basestation files\npp = extractPilotingParams(CONFIG, fullfile(CONFIG.path.mission, 'basestationFiles'), ...\nfullfile(CONFIG.path.mission, 'flightStatus'), 0);\n% change last argument from 0 to 1 to load existing data and append new dives/rows\n\n% save it to the default location\nsave(fullfile(CONFIG.path.mission, 'flightStatus', ['diveTracking_' CONFIG.glider '.mat']), 'pp');\n\n```\n\n<sub>[Back to top](#)</sub>\n\n### Mid-mission plots\n\nFor detail on all available plotting functions, see the [Plots](plotting-functions){target='_blank'} page. A highlight of those most useful for piloting are below. \n\nThe below steps require a `pp` variable. If it was created already, this first step is not needed.\n\n```default\n% load existing pp table\nload(fullfile(CONFIG.path.mission, 'flightStatus', ['diveTracking_' CONFIG.glider '.mat']))\n```\n\n#### Map\n...with target waypoints, dives completed thus far, and vector arrows for the currents. \n\nIn this example, bathymetry is plotted, specified by `CONFIG.map.bathyFile`. That last argument can be left out to not plot bathymetry (which can be slow depending on the resolution of the selected bathymetry raster). If the last argument is set to `1`, a prompt will appear to select the correct bathymetry file. \n\nThe below example code saves the map both as a .fig file and a .png. The .fig version will be a very large file, if bathymetry is included, but it is useful for reopening in MATLAB and being able to zoom and move around in the plot. The .png is good for a quick easy overview and is sharable, but doesn't allow the interactive zooming that a pilot may need. \n\nHigh resolution bathymetry TIFF files can be downloaded from  [NCEI](https://www.ncei.noaa.gov/products/etopo-global-relief-model). Depending on the needed resolution, the 60 arc second TIFF may be sufficient, and is a reasonable size for download and plotting, but is slow to load because it covers the whole globe. Alternatively, finer resolution (15-60 arc second resolution options) for the specific area of interest can be extracted using the [ETOPO Grid Extract tool](https://www.ncei.noaa.gov/maps/grid-extract/) to download a TIFF that covers a smaller area, but in a smaller sized file for faster loading and plotting. \n\n```default\n% print map **SLOWISH** - figNumList(1)\ntargetsFile = fullfile(CONFIG.path.mission, 'targets');\nplotGliderPath_etopo(CONFIG, pp, targetsFile, CONFIG.map.bathyFile);\n\n% save it as a .fig (for zooming)\nsavefig(fullfile(path_status, [CONFIG.glider '_map.fig']))\n% and as a .png (for quick/easy view)\nexportgraphics(gca, fullfile(path_status, [CONFIG.glider '_map.png']), ...\n\t'Resolution', 300)\n```\n<sub>[Back to top](#)</sub>\n\n#### Monitoring plots\n...for humidity, internal pressure, battery consumption, power draw, and acoustic system status. \n\nIndividual pilots may find some or all or none of these plots useful, but here are just a few examples. The example code has the option to save the figures with the `print()` function, but that is optional. To automatically plot, save, and then close the figures, just add a `close` command after print (see example with third and fifth plots below). \n\n```default\n% humidity and pressure - figNumList(2)\nplotHumidityPressure(CONFIG, pp)\nprint(fullfile(path_status, [CONFIG.glider  '_humidityPressure.png']), '-dpng')\n\n% battery usage/free space - figNumList(3)\nplotBattUseFreeSpace(CONFIG, pp, 310)\nprint(fullfile(path_status, [CONFIG.glider '_battUseFreeSpace.png']), '-dpng')\n\n% voltage pack use (power draw by device) - figNumList(4)\nplotVoltagePackUse(CONFIG, pp)\nprint(fullfile(path_status, [CONFIG.glider '_usageByDevice.png']), '-dpng')\nclose \n\n% voltage pack use (power draw by device, normalized by dive duration) - figNumList(5)\nplotVoltagePackUse_norm(CONFIG, pp)\nprint(fullfile(path_status, [CONFIG.glider '_usageByDevice_normalized_.png']), '-dpng')\n\n% minimum reported voltages - figNumList(6)\nplotMinVolt(CONFIG, pp)\nprint(fullfile(path_status, [CONFIG.glider '_minimumVoltage.png']), '-dpng')\n% close\n\n```\n\nIf the glider is running a PMAR acoustic system (and `CONFIG.pm.loggers = 1` is set in the configuration file), the free space remaining on each SD card will be plotted by `plotBattUseFreeSpace`. Additionally, storage space used per minute, by dive, and over time can be plotted with `plotPmUsed`:\n\n```default\n% PMAR space used per minute and over time\nplotPmUsed(CONFIG, pp)\n```\n\nIf the glider is running a WISPR acoustic system (and `CONFIG.ws.loggers = 1` is set in the configuration file), and using the on-board ERMA sperm whale detector, detection events can be plotted for a single dive. The plots show ICI (inter-click-interval) over the event duration and as a histogram. This plot is interactive and allows the user to click backwards through previous dives; a specific dive can be specified in the function call or `end` can be used to plot the most recent dive. The plot also provides a 'reference plot' showing what a true detection event of both a group of sperm whales or an individual sperm whale would look like. This plot can be used by the pilot to compare and validate the incoming detections. \n\n```default\n% plot detection events from the most recent dive\nplotErmaDetections(CONFIG, path_bsLocal, pp.diveNum(end))\n```\n\n<sub>[Back to top](#)</sub>\n\n### Printing errors and mission speed and duration information\n\nThe Seaglider .log file provides a summary of any errors that occurred during each dive, but they are just a list of integers that then have to be compared to a manual (and differ by Rev B vs Rev E!) so there is a function to print out all non-zero errors and a short descriptor of the type. Any dive can be specified in the second argument, or just the most recent dive as shown below. \n\n```default\n% print out errors with info on type, for the most recent dive\nprintErrors(CONFIG, size(pp,1), pp)\n```\n\nThe `printTravelMetrics` and `printRecoveryMetrics` functions calculate several summary values for the glider's average speed, progress along the trackline, and estimated time of arrival at the recovery point (last waypoint in targets file). These outputs can be printed to the MATLAB Command Window if the last argument is set to `1`, otherwise they will be stored in a structure `tm`. \n\n```default\n% print avg speed and rough estimate of total mission duration\ntm = printTravelMetrics(CONFIG, pp, fullfile(CONFIG.path.mission, 'targets'), 1);\n\n% specify planned recovery date and time\nrecovery = '2023-06-05 19:00:00';\nrecTZ = 'Pacific/Honolulu';\ntm = printRecoveryMetrics(CONFIG, pp, fullfile(CONFIG.path.mission, 'targets'), ...\nrecovery, recTZ, 1);\n```\n\n<sub>[Back to top](#)</sub>\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}